//
// Generated file, do not edit! Created by opp_msgtool 6.1 from packets/PSAMessage.msg.
//

#ifndef __PSAMESSAGE_M_H
#define __PSAMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class PSAMessage;
#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress

/**
 * Enum generated from <tt>packets/PSAMessage.msg:4</tt> by opp_msgtool.
 * <pre>
 * enum PSAMessageType
 * {
 *     Subscription = 0;
 *     Publication = 1;
 *     Acking = 2;
 * }
 * </pre>
 */
enum PSAMessageType {
    Subscription = 0,
    Publication = 1,
    Acking = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PSAMessageType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PSAMessageType& e) { int n; b->unpack(n); e = static_cast<PSAMessageType>(n); }

/**
 * Class generated from <tt>packets/PSAMessage.msg:10</tt> by opp_msgtool.
 * <pre>
 * class PSAMessage extends inet::FieldsChunk
 * {
 *     chunkLength = inet::B(6);
 *     uint8_t hopCount = 0;
 *     uint32_t nonce;
 *     PSAMessageType type;
 *     bool needAcking;
 *     string topic;
 *     string sourceNodeName;
 *     inet::MacAddress pathHops[];
 * }
 * </pre>
 */
class PSAMessage : public ::inet::FieldsChunk
{
  protected:
    uint8_t hopCount = 0;
    uint32_t nonce = 0;
    PSAMessageType type = static_cast<PSAMessageType>(-1);
    bool needAcking = false;
    omnetpp::opp_string topic;
    omnetpp::opp_string sourceNodeName;
    inet::MacAddress *pathHops = nullptr;
    size_t pathHops_arraysize = 0;

  private:
    void copy(const PSAMessage& other);

  protected:
    bool operator==(const PSAMessage&) = delete;

  public:
    PSAMessage();
    PSAMessage(const PSAMessage& other);
    virtual ~PSAMessage();
    PSAMessage& operator=(const PSAMessage& other);
    virtual PSAMessage *dup() const override {return new PSAMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getHopCount() const;
    virtual void setHopCount(uint8_t hopCount);

    virtual uint32_t getNonce() const;
    virtual void setNonce(uint32_t nonce);

    virtual PSAMessageType getType() const;
    virtual void setType(PSAMessageType type);

    virtual bool getNeedAcking() const;
    virtual void setNeedAcking(bool needAcking);

    virtual const char * getTopic() const;
    virtual void setTopic(const char * topic);

    virtual const char * getSourceNodeName() const;
    virtual void setSourceNodeName(const char * sourceNodeName);

    virtual void setPathHopsArraySize(size_t size);
    virtual size_t getPathHopsArraySize() const;
    virtual const inet::MacAddress& getPathHops(size_t k) const;
    virtual inet::MacAddress& getPathHopsForUpdate(size_t k) { handleChange();return const_cast<inet::MacAddress&>(const_cast<PSAMessage*>(this)->getPathHops(k));}
    virtual void setPathHops(size_t k, const inet::MacAddress& pathHops);
    virtual void insertPathHops(size_t k, const inet::MacAddress& pathHops);
    [[deprecated]] void insertPathHops(const inet::MacAddress& pathHops) {appendPathHops(pathHops);}
    virtual void appendPathHops(const inet::MacAddress& pathHops);
    virtual void erasePathHops(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PSAMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PSAMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline PSAMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<PSAMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __PSAMESSAGE_M_H

